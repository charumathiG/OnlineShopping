/*
Deployment script for OnlineShoppingSite

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OnlineShoppingSite"
:setvar DefaultFilePrefix "OnlineShoppingSite"
:setvar DefaultDataPath "C:\Users\charumathi.gunasekar\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\charumathi.gunasekar\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AddToCart]...';


GO
CREATE PROCEDURE [dbo].[AddToCart]
(
@CustomerID INT,
@Product_Id VARCHAR(5)
)
AS
DECLARE @DATE DATE = (SELECT CONVERT(DATE,GETDATE()))
BEGIN
	INSERT INTO [dbo].[AddToCart] VALUES
	(
	@Product_Id,
	@CustomerID,
	@Date
	)
END
GO
PRINT N'Creating [dbo].[CancelOrder]...';


GO
CREATE PROCEDURE [dbo].[CancelOrder]
(
@OrderID int
)
as
begin
delete from [dbo].[Payment] where OrderID=@OrderID
end
GO
PRINT N'Creating [dbo].[ErrorHandling]...';


GO
CREATE PROCEDURE [dbo].[ErrorHandling]
(
@errorLine INT, 
@errorMessage VARCHAR(255), 
@errorNumber INT, 
@errorProcedure VARCHAR(255)
)
AS
BEGIN
INSERT INTO [dbo].[ErrorLog](
ErrorLine, 
ErrorMessage, 
ErrorNumber, 
ErrorProcedure
)
VALUES(
@errorLine, 
@errorMessage, 
@errorNumber, 
@errorProcedure
)
END
GO
PRINT N'Creating [dbo].[ErrorSelectAll]...';


GO
CREATE PROCEDURE [dbo].[ErrorSelectAll]
AS
BEGIN
SELECT 
ErrorLine, 
ErrorMessage, 
ErrorNumber, 
ErrorProcedure
FROM
ErrorLog

END
GO
PRINT N'Creating [dbo].[Feedback]...';


GO
CREATE PROCEDURE  [dbo].[Feedback]
(
@CustomerID INT,
@Product_Id VARCHAR(5),
@Comment VARCHAR(300)
)
AS
BEGIN
	INSERT INTO [dbo].[Feedback] VALUES
	(
	@Product_Id,
	@CustomerID,
	@Comment
	)
END
GO
PRINT N'Creating [dbo].[Orders]...';


GO
CREATE PROCEDURE [dbo].[Orders]
(
@CustomerID INT,
@PRODUCT_ID VARCHAR(5),
@QUANTITY INT
)
AS
DECLARE @DATE DATE = (SELECT CONVERT(DATE,GETDATE()))
BEGIN
	INSERT INTO [dbo].[Orders] VALUES
	(
	@PRODUCT_ID,
	@DATE,@DATE,
	@CustomerID,
	@QUANTITY,
	'PAYMENT PENDING'
	)
END
GO
PRINT N'Creating [dbo].[Payment]...';


GO
CREATE PROCEDURE [dbo].[Payment]
(
@OrderID int ,
@Product_Id varchar(5),
@TotalPrice numeric(7,2)
)
as
DECLARE @DATE DATE = (SELECT CONVERT(DATE,GETDATE()))
begin
insert into [dbo].[Payment] values
(
@OrderID,
@Product_Id,
@TotalPrice,
@DATE
)
end
GO
PRINT N'Creating [dbo].[PaymentType]...';


GO
CREATE PROCEDURE [dbo].[PaymentType]
(
@PaymentMode varchar(20)
)
as
begin
select * from [dbo].[PaymentType] where Paymentmode = @PaymentMode
end

exec  proc_type 'credit'
GO
PRINT N'Creating [dbo].[Products]...';


GO
CREATE PROCEDURE [dbo].[Products]
as
begin
select * from [dbo].[Products]
end
GO
PRINT N'Creating [dbo].[UserLogin]...';


GO
CREATE PROCEDURE [dbo].[UserLogin]
(
@CustomerEmail varchar(100),
@CustomerPassword varchar(100)
)
as
begin
select * from Customers where CustomerEmail = @CustomerEmail
AND 
CustomerPassword =@CustomerPassword
end
GO
PRINT N'Creating [dbo].[CustomerRegistration]...';


GO
CREATE PROCEDURE [dbo].[CustomerRegistration]
(
    @CustomerName VARCHAR(50),
	@CustomerPhone VARCHAR(11),
	@CustomerPassword VARCHAR(100),
	@CustomerEmail VARCHAR(100),
	@CustomerAddress VARCHAR(100)
)
	AS
	BEGIN
	BEGIN TRY
	INSERT INTO [dbo].[Customers] VALUES
	(
	@CustomerName,
	@CustomerPhone,
	@CustomerPassword,
	@CustomerEmail,
	@CustomerAddress
)  
END TRY
BEGIN CATCH
DECLARE @errorLine INT, @errorMessage VARCHAR(255), @errorNumber INT, @errorProcedure VARCHAR(255)
SET @errorLine=ERROR_LINE()
SET @errorMessage=ERROR_MESSAGE() 
SET @errorProcedure= ERROR_PROCEDURE() 
SET @errorNumber=ERROR_NUMBER() 
EXECUTE [dbo].[ErrorHandling] @errorLine, @errorMessage, @errorProcedure, @errorNumber
END CATCH
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table Customers(
  CustomerID int IDENTITY(100,1) primary key,
  CustomerName varchar(50) not null,
  CustomerPhone varchar(11) not null,
  CustomerPassword varchar(100)not null,
  CustomerEmail varchar(100)not null,
  CustomerAddress varchar(100) not null
  )

 
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table Payment(
        
    Payment_Id int IDENTITY(100,1),
	OrderID int not null constraint fk_OrderId foreign key references Orders(OrderID),
    Product_Id varchar(5) foreign key references Products(Product_Id),
	TotalPrice numeric(7,2),
    PaymentMode varchar(20)not null,
	date[date]
)

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table Orders(
	OrderID int IDENTITY(1,1) primary key clustered,
	Product_Id varchar(5) foreign key references Products(Product_Id),
	OrderDate date not null,
	OrderDeliveryDate datetime2(0)null,
	CustomerID int not null constraint fk_customer_Id foreign key references Customers(CustomerID),
	Quantity int,
	Status varchar(20)
)

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table Products(
  Id int identity primary key,
  Product_Id AS 'P'+RIGHT('0000'+CAST(Id AS VARCHAR(10)),4) persisted unique,
  Product_Name varchar(100)not null,
  Category varchar(50),
  Product_Type varchar(50),
  Descriptions1 varchar(600)not null,
  Price numeric(7,2)not null,
  Quantity int,
  Images varchar(400)unique
)



/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table Feedback(
	CustomerID int not null foreign key references Customers(CustomerID),
	Product_Id varchar(5) foreign key references Products(Product_Id),
	Comment varchar(300) not null
	)
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
create table AddToCart(
	ID int IDENTITY(1,1),
	CustomerID int not null foreign key references Customers(CustomerID),
	Product_Id varchar(5) foreign key references Products(Product_Id),
	Date[date]
	)







GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
